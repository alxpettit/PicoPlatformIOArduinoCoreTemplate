; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

; Notes:
; - OpenOCD+GDB stack will automatically run when you start debug mode with the PlatformIO toolchain installed, in CLion
; - Simply select PlatformIO Debug | pico from the configuration dropdown, then press the green bug icon :)
; - To use GDB from the terminal, you can call `pio debug --interface gdb`
; - Alternatively, you can use the `piodebuggdb` binary wrapper
; TODO: sample platformio_override.ini

[platformio]
default_envs = pico

; Global data for all env
; See: https://docs.platformio.org/en/latest/projectconf/section_platformio.html#projectconf-pio-default-envs
[env]
platform = https://github.com/maxgerhardt/platform-raspberrypi.git
board = pico
framework = arduino

monitor_speed = 115200

; Upload speed affects only upload speed via direct serial connection, not picoprobe
upload_speed = 115200

; Debug speed defaults to 5000 kHz for PicoProbe... wonder if I can adjust the firmware to make it faster?
; It doesn't seem to work, though
; debug_speed = 115200

; NOTE on serial device by-id symlink names:
; On my machine, the Raspberry Pico board shows up sometimes as both of these:
; - /dev/serial/by-id/usb-Arduino_RaspberryPi_Pico_815460E636235BDB-if00
; - /dev/serial/by-id/usb-Arduino_Nano_RP2040_Connect_815460E6365D73DB-if00
; - Fresh devices may not show an available serial connection, I believe due to the lack of
;       a bootloader configuration for such a feature.
; - I believe that if you use the stock generic ARM toolchain from PlatformIO, the device serial will erroneously identify
;       itself as a Connect instead of a Pico.
; Once you flash it with Arduino-Pico, it should be normalized. Note, however, that the serial number is part of the device ID,
;   and persists across multiple bootloader configurations.
; Therefore, it will be the policy of this project to relegate serial upload_port settings to platformio_override.ini.
; monitor_port = /dev/serial/by-id/usb-Raspberry_Pi_PicoArduino_E6605481DB5B2336-if00
monitor_flags =
    ; --encoding hexlify

board_build.core = earlephilhower
board_build.filesystem_size = 1m

; 133MHz
board_build.f_cpu = 133000000L

upload_protocol = picoprobe

; build_flags = -DDEBUG_RP2040_WIRE -DDEBUG_RP2040_SPI -DDEBUG_RP2040_CORE
; build_flags = -DDEBUG_RP2040_WIRE -DDEBUG_RP2040_SPI -DDEBUG_RP2040_CORE -DDEBUG_RP2040_PORT=Serial2

debug_tool = picoprobe

; Rather than use the repo'ed toolchains, we want to use the arduino-pico 'Arduino core' implementation.
; This implementation includes the Pico SDK from the Raspberry Foundation, so that you don't have to worry about downloading/compiling it.
; You also don't have to worry about header file paths and such, per usual.
; note that download link for toolchain is specific for OS. see https://github.com/earlephilhower/pico-quick-toolchain/releases
platform_packages =
    maxgerhardt/framework-arduinopico@https://github.com/earlephilhower/arduino-pico.git
    maxgerhardt/toolchain-pico@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.3.3-a/x86_64-linux-gnu.arm-none-eabi-ed6d983.220212.tar.gz
    platformio/tool-openocd-raspberrypi@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.3.3-a/x86_64-linux-gnu.openocd-e3428fadb.220212.tar.gz
; extra_scripts = tmux-monitor-start.py

lib_ldf_mode = chain+

lib_deps =
    nachtravevl/PCA9685-Arduino@^1.2.15


; Debug init commands stolen from here:
; https://community.platformio.org/t/attach-debugger-to-running-program-without-reset/18285/2

debug_init_break =

debug_load_cmds =

debug_init_cmds =
    target extended-remote $DEBUG_PORT
    $INIT_BREAK
    monitor halt
    monitor init
    monitor resume

debug_server =
    ${platformio.packages_dir}/tool-openocd-raspberrypi/bin/openocd
    -f ${platformio.packages_dir}/tool-openocd-raspberrypi/share/openocd/scripts/interface/picoprobe.cfg
    -f ${platformio.packages_dir}/tool-openocd-raspberrypi/share/openocd/scripts/target/rp2040.cfg

build_type = debug

[env:pico]
; Use all defaults for 'pico' env

[env:release]
; Release has build type release... duh
build_type = release
